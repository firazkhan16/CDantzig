plot(residuals(mlr3), log(aadt$x1), ylab = "Residuals", xlab = "X1")
plot(residuals(mlr3), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr3), aadt$x4, ylab = "Residuals", xlab = "X4")
dwtest(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
mlrs = summary(mlr3)
con <- c(1,log(50000),3,2)
lhat <- sum(con*coef(mlr3))
t = qt(0.975,117)
c3 = 1
bm = t*mlrs$sigma*sqrt(con%*%mlrs$cov.unscaled%*%con + c3)
c(lhat - bm, lhat + bm)^3
con = data.frame(x1 = 50000, x2 = 3, x3 = 60, x4 = 2)
predict(mlr3, con, interval = “prediction”, level = 0.95)^3
predict(mlr3, con, interval = “prediction”, level = 0.95)
con = data.frame(x1 = 50000, x2 = 3, x3 = 60, x4 = 2)
predict(mlr3, con, interval = “prediction”, level = 0.95)^3
predict(mlr3, con, interval = 'prediction', level = 0.95)^3
library(dplyr)
library(ggplot2)
library(lmtest)
aadt_raw = read.table('aadt.txt', header = FALSE)
aadt = data.frame(y = aadt_raw$V1, x1 = aadt_raw$V2, x2 = aadt_raw$V3, x3 = aadt_raw$V4, x4 = aadt_raw$V5)
plot(aadt)
mlr = lm(y ~ x1 + x2 + x3 + x4, data = aadt)
summary(mlr)
names(mlr)
qqnorm(residuals(mlr), ylab = "mlr")
qqline(residuals(mlr))
par(mfrow = c(1,5))
plot(residuals(mlr), fitted(mlr), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr), aadt$x1, ylab = "Residuals", xlab = "X1")
plot(residuals(mlr), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr), aadt$x3, ylab = "Residuals", xlab = "X3")
plot(residuals(mlr), aadt$x4, ylab = "Residuals", xlab = "X4")
par(mfrow = c(1,1))
library(lmtest)
dwtest(y ~ x1 + x2 + x3 + x4, data = aadt)
mlr1 = lm(y ~ x1 + x2 + x4, data = aadt)
anova(mlr1, mlr)
mlr2 = lm(I(y^(1/3)) ~ x1 + x2 + x4, data = aadt)
summary(mlr2)
par(mfrow = c(1,1))
qqnorm(residuals(mlr2), ylab = "mlr2")
qqline(residuals(mlr2))
par(mfrow = c(1,4))
plot(residuals(mlr2), fitted(mlr2), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr2), aadt$x1, ylab = "Residuals", xlab = "X1")
plot(residuals(mlr2), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr2), aadt$x4, ylab = "Residuals", xlab = "X4")
aadtv2 = aadt
aadtv2$y = aadtv2$y^(1/3)
plot(aadtv2)
mlr3 = lm(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
summary(mlr3)
par(mfrow = c(1,1))
qqnorm(residuals(mlr3), ylab = "mlr3")
qqline(residuals(mlr3))
par(mfrow = c(1,4))
plot(residuals(mlr3), fitted(mlr3), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr3), log(aadt$x1), ylab = "Residuals", xlab = "X1")
plot(residuals(mlr3), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr3), aadt$x4, ylab = "Residuals", xlab = "X4")
dwtest(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
mlrs = summary(mlr3)
con <- c(1,log(50000),3,2)
lhat <- sum(con*coef(mlr3))
t = qt(0.975,117)
c3 = 1
bm = t*mlrs$sigma*sqrt(con%*%mlrs$cov.unscaled%*%con + c3)
c(lhat - bm, lhat + bm)^3
con = data.frame(x1 = 50000, x2 = 3, x3 = 60, x4 = 2)
predict(mlr3, con, interval = 'prediction', level = 0.95)^3
library(dplyr)
library(ggplot2)
library(lmtest)
aadt_raw = read.table('~/Downloads/MLR.txt', header = FALSE)
library(dplyr)
library(ggplot2)
library(lmtest)
aadt_raw = read.table('aadt', header = FALSE)
library(dplyr)
library(ggplot2)
library(lmtest)
aadt_raw = read.table('aadt.txt', header = FALSE)
aadt = data.frame(y = aadt_raw$V1, x1 = aadt_raw$V2, x2 = aadt_raw$V3, x3 = aadt_raw$V4, x4 = aadt_raw$V5)
plot(aadt)
# Fit MLR model
mlr = lm(y ~ x1 + x2 + x3 + x4, data = aadt)
summary(mlr)
# Checking time order
names(mlr)
# Normality check
qqnorm(residuals(mlr), ylab = "mlr")
qqline(residuals(mlr))
# Residual plot
par(mfrow = c(1,5))
plot(residuals(mlr), fitted(mlr), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr), aadt$x1, ylab = "Residuals", xlab = "X1")
plot(residuals(mlr), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr), aadt$x3, ylab = "Residuals", xlab = "X3")
plot(residuals(mlr), aadt$x4, ylab = "Residuals", xlab = "X4")
par(mfrow = c(1,1))
# Checking for Sequential Dependence/ Durbin-Watson Test
dwtest(y ~ x1 + x2 + x3 + x4, data = aadt)
# Some F-tests
# Test for B_3 coefficient is zero
mlr_eval = lm(y ~ x3, data = aadt)
anova(mlr_eval, mlr)
# Test for B_ coefficient is constant
mlr_eval2 = lm(y ~ x1 + x2 + offset(1e+02*x3) + x4, data = aadt)
anova(mlr_eval2, mlr)
# Second model
mlr1 = lm(y ~ x1 + x2 + x4, data = aadt)
anova(mlr1, mlr)
# Third model
mlr2 = lm(I(y^(1/3)) ~ x1 + x2 + x4, data = aadt)
summary(mlr2)
# Normality check
par(mfrow = c(1,1))
qqnorm(residuals(mlr2), ylab = "mlr2")
qqline(residuals(mlr2))
# Residual plot
par(mfrow = c(1,4))
plot(residuals(mlr2), fitted(mlr2), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr2), aadt$x1, ylab = "Residuals", xlab = "X1")
plot(residuals(mlr2), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr2), aadt$x4, ylab = "Residuals", xlab = "X4")
#Observing transformed y^1/3
aadtv2 = aadt
aadtv2$y = aadtv2$y^(1/3)
plot(aadtv2)
# Fourth model
mlr3 = lm(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
summary(mlr3)
anova(mlr1, mlr3)
# Normality Check
par(mfrow = c(1,1))
qqnorm(residuals(mlr3), ylab = "mlr3")
qqline(residuals(mlr3))
# Residual Plot
par(mfrow = c(1,4))
plot(residuals(mlr3), fitted(mlr3), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr3), log(aadt$x1), ylab = "Residuals", xlab = "X1")
plot(residuals(mlr3), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr3), aadt$x4, ylab = "Residuals", xlab = "X4")
# Checking for Sequential Dependence/ Durbin-Watson Test
dwtest(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
# Predictions
mlrs = summary(mlr3)
con <- c(1,log(50000),3,2)
lhat <- sum(con*coef(mlr3))
# Calculate the critical value with degree of freedom of 116
t = qt(0.975,117)
c3 = 1
bm = t*mlrs$sigma*sqrt(con%*%mlrs$cov.unscaled%*%con + c3)
# Prediction interval of new response
c(lhat - bm, lhat + bm)^3
# Alternative method to get prediction interval
con = data.frame(x1 = 50000, x2 = 3, x3 = 60, x4 = 2)
predict(mlr3, con, interval = 'prediction', level = 0.95)^3
predict(mlr3, con, interval = 'confidence', level = 0.95)^3
mlr = lm(y ~ x1 + x2 + x3 + x4, data = aadt)
summary(mlr)
# Normality check
qqnorm(residuals(mlr), ylab = "mlr")
qqline(residuals(mlr))
par(mfrow = c(1,5))
plot(residuals(mlr), fitted(mlr), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr), aadt$x1, ylab = "Residuals", xlab = "X1")
plot(residuals(mlr), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr), aadt$x3, ylab = "Residuals", xlab = "X3")
plot(residuals(mlr), aadt$x4, ylab = "Residuals", xlab = "X4")
# Checking for Sequential Dependence/ Durbin-Watson Test
dwtest(y ~ x1 + x2 + x3 + x4, data = aadt)
# Test for B_3 coefficient is zero
mlr_eval = lm(y ~ x3, data = aadt)
anova(mlr_eval, mlr)
# Test for B_ coefficient is constant
mlr_eval2 = lm(y ~ x1 + x2 + offset(1e+02*x3) + x4, data = aadt)
anova(mlr_eval2, mlr)
# Second model
mlr1 = lm(y ~ x1 + x2 + x4, data = aadt)
anova(mlr1, mlr)
# Second model
mlr1 = lm(y ~ x1 + x2 + x4, data = aadt)
anova(mlr1, mlr)
# Third model
mlr2 = lm(I(y^(1/3)) ~ x1 + x2 + x4, data = aadt)
summary(mlr2)
#Observing transformed y^1/3
aadtv2 = aadt
aadtv2$y = aadtv2$y^(1/3)
plot(aadtv2)
# Normality Check
par(mfrow = c(1,1))
qqnorm(residuals(mlr3), ylab = "mlr3")
qqline(residuals(mlr3))
# Residual Plot
par(mfrow = c(1,4))
plot(residuals(mlr3), fitted(mlr3), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr3), log(aadt$x1), ylab = "Residuals", xlab = "X1")
plot(residuals(mlr3), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr3), aadt$x4, ylab = "Residuals", xlab = "X4")
source("C:/Users/User/Downloads/Telegram Desktop/Regression_Project.R", echo=TRUE)
# Normality Check
par(mfrow = c(1,1))
qqnorm(residuals(mlr3), ylab = "mlr3")
qqline(residuals(mlr3))
# Residual Plot
par(mfrow = c(1,4))
plot(residuals(mlr3), fitted(mlr3), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr3), log(aadt$x1), ylab = "Residuals", xlab = "X1")
plot(residuals(mlr3), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr3), aadt$x4, ylab = "Residuals", xlab = "X4")
# Third model
mlr2 = lm(I(y^(1/3)) ~ x1 + x2 + x4, data = aadt)
summary(mlr2)
# Fourth model
mlr3 = lm(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
summary(mlr3)
anova(mlr1, mlr3)
library(dplyr)
library(ggplot2)
library(lmtest)
aadt_raw = read.table('aadt.txt', header = FALSE)
aadt = data.frame(y = aadt_raw$V1, x1 = aadt_raw$V2, x2 = aadt_raw$V3, x3 = aadt_raw$V4, x4 = aadt_raw$V5)
plot(aadt)
# Fit MLR model
mlr = lm(y ~ x1 + x2 + x3 + x4, data = aadt)
summary(mlr)
# Checking time order
names(mlr)
# Normality check
qqnorm(residuals(mlr), ylab = "mlr")
qqline(residuals(mlr))
# Residual plot
par(mfrow = c(1,5))
plot(residuals(mlr), fitted(mlr), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr), aadt$x1, ylab = "Residuals", xlab = "X1")
plot(residuals(mlr), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr), aadt$x3, ylab = "Residuals", xlab = "X3")
plot(residuals(mlr), aadt$x4, ylab = "Residuals", xlab = "X4")
par(mfrow = c(1,1))
# Checking for Sequential Dependence/ Durbin-Watson Test
dwtest(y ~ x1 + x2 + x3 + x4, data = aadt)
# Some F-tests
# Test for B_3 coefficient is zero
mlr_eval = lm(y ~ x3, data = aadt)
anova(mlr_eval, mlr)
# Test for B_ coefficient is constant
mlr_eval2 = lm(y ~ x1 + x2 + offset(1e+02*x3) + x4, data = aadt)
anova(mlr_eval2, mlr)
# Second model
mlr1 = lm(y ~ x1 + x2 + x4, data = aadt)
anova(mlr1, mlr)
# Third model
mlr2 = lm(I(y^(1/3)) ~ x1 + x2 + x4, data = aadt)
summary(mlr2)
# Normality check
par(mfrow = c(1,1))
qqnorm(residuals(mlr2), ylab = "mlr2")
qqline(residuals(mlr2))
# Residual plot
par(mfrow = c(1,4))
plot(residuals(mlr2), fitted(mlr2), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr2), aadt$x1, ylab = "Residuals", xlab = "X1")
plot(residuals(mlr2), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr2), aadt$x4, ylab = "Residuals", xlab = "X4")
#Observing transformed y^1/3
aadtv2 = aadt
aadtv2$y = aadtv2$y^(1/3)
plot(aadtv2)
# Fourth model
mlr3 = lm(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
summary(mlr3)
anova(mlr1, mlr3)
mlr3 = lm(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
summary(mlr3)
anova(mlr1, mlr3)
anova(mlr1, mlr3)
library(dplyr)
library(ggplot2)
library(lmtest)
aadt_raw = read.table('aadt.txt', header = FALSE)
aadt = data.frame(y = aadt_raw$V1, x1 = aadt_raw$V2, x2 = aadt_raw$V3, x3 = aadt_raw$V4, x4 = aadt_raw$V5)
plot(aadt)
# Fit MLR model
mlr = lm(y ~ x1 + x2 + x3 + x4, data = aadt)
summary(mlr)
# Checking time order
names(mlr)
# Normality check
qqnorm(residuals(mlr), ylab = "mlr")
qqline(residuals(mlr))
# Residual plot
par(mfrow = c(1,5))
plot(residuals(mlr), fitted(mlr), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr), aadt$x1, ylab = "Residuals", xlab = "X1")
plot(residuals(mlr), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr), aadt$x3, ylab = "Residuals", xlab = "X3")
plot(residuals(mlr), aadt$x4, ylab = "Residuals", xlab = "X4")
par(mfrow = c(1,1))
# Checking for Sequential Dependence/ Durbin-Watson Test
dwtest(y ~ x1 + x2 + x3 + x4, data = aadt)
# Some F-tests
# Test for B_3 coefficient is zero
mlr_eval = lm(y ~ x3, data = aadt)
anova(mlr_eval, mlr)
# Test for B_ coefficient is constant
mlr_eval2 = lm(y ~ x1 + x2 + offset(1e+02*x3) + x4, data = aadt)
anova(mlr_eval2, mlr)
# Second model
mlr1 = lm(y ~ x1 + x2 + x4, data = aadt)
anova(mlr1, mlr)
# Third model
mlr2 = lm(I(y^(1/3)) ~ x1 + x2 + x4, data = aadt)
summary(mlr2)
# Normality check
par(mfrow = c(1,1))
qqnorm(residuals(mlr2), ylab = "mlr2")
qqline(residuals(mlr2))
# Residual plot
par(mfrow = c(1,4))
plot(residuals(mlr2), fitted(mlr2), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr2), aadt$x1, ylab = "Residuals", xlab = "X1")
plot(residuals(mlr2), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr2), aadt$x4, ylab = "Residuals", xlab = "X4")
#Observing transformed y^1/3
aadtv2 = aadt
aadtv2$y = aadtv2$y^(1/3)
plot(aadtv2)
# Fourth model
mlr3 = lm(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
summary(mlr3)
anova(mlr1, mlr3)
library(dplyr)
library(ggplot2)
library(lmtest)
aadt_raw = read.table('aadt.txt', header = FALSE)
aadt = data.frame(y = aadt_raw$V1, x1 = aadt_raw$V2, x2 = aadt_raw$V3, x3 = aadt_raw$V4, x4 = aadt_raw$V5)
plot(aadt)
# Fit MLR model
mlr = lm(y ~ x1 + x2 + x3 + x4, data = aadt)
summary(mlr)
# Checking time order
names(mlr)
# Normality check
qqnorm(residuals(mlr), ylab = "mlr")
qqline(residuals(mlr))
# Residual plot
par(mfrow = c(1,5))
plot(residuals(mlr), fitted(mlr), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr), aadt$x1, ylab = "Residuals", xlab = "X1")
plot(residuals(mlr), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr), aadt$x3, ylab = "Residuals", xlab = "X3")
plot(residuals(mlr), aadt$x4, ylab = "Residuals", xlab = "X4")
par(mfrow = c(1,1))
# Checking for Sequential Dependence/ Durbin-Watson Test
dwtest(y ~ x1 + x2 + x3 + x4, data = aadt)
# Some F-tests
# Test for B_3 coefficient is zero
mlr_eval = lm(y ~ x3, data = aadt)
anova(mlr_eval, mlr)
# Test for B_ coefficient is constant
mlr_eval2 = lm(y ~ x1 + x2 + offset(1e+02*x3) + x4, data = aadt)
anova(mlr_eval2, mlr)
# Second model
mlr1 = lm(y ~ x1 + x2 + x4, data = aadt)
anova(mlr1, mlr)
# Third model
mlr2 = lm(I(y^(1/3)) ~ x1 + x2 + x4, data = aadt)
summary(mlr2)
# Normality check
par(mfrow = c(1,1))
qqnorm(residuals(mlr2), ylab = "mlr2")
qqline(residuals(mlr2))
# Residual plot
par(mfrow = c(1,4))
plot(residuals(mlr2), fitted(mlr2), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr2), aadt$x1, ylab = "Residuals", xlab = "X1")
plot(residuals(mlr2), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr2), aadt$x4, ylab = "Residuals", xlab = "X4")
#Observing transformed y^1/3
aadtv2 = aadt
aadtv2$y = aadtv2$y^(1/3)
plot(aadtv2)
# Fourth model
mlr3 = lm(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
summary(mlr3)
anova(mlr1, mlr3)
par(mfrow = c(1,1))
qqnorm(residuals(mlr3), ylab = "mlr3")
qqline(residuals(mlr3))
# Residual Plot
# Residual Plot
par(mfrow = c(1,4))
plot(residuals(mlr3), fitted(mlr3), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr3), log(aadt$x1), ylab = "Residuals", xlab = "X1")
plot(residuals(mlr3), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr3), aadt$x4, ylab = "Residuals", xlab = "X4")
# Checking for Sequential Dependence/ Durbin-Watson Test
dwtest(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
summary(mlr3)
qqnorm(residuals(mlr3), ylab = "mlr3")
qqline(residuals(mlr3))
par(mfrow = c(1,4))
plot(residuals(mlr3), fitted(mlr3), ylab = "Residuals", xlab = "Fitted values")
plot(residuals(mlr3), log(aadt$x1), ylab = "Residuals", xlab = "X1")
plot(residuals(mlr3), aadt$x2, ylab = "Residuals", xlab = "X2")
plot(residuals(mlr3), aadt$x4, ylab = "Residuals", xlab = "X4")
# Checking for Sequential Dependence/ Durbin-Watson Test
# Checking for Sequential Dependence/ Durbin-Watson Test
dwtest(y^(1/3) ~ log(x1) + x2 + x4, data = aadt)
# Predictions
mlrs = summary(mlr3)
con <- c(1,log(50000),3,2)
lhat <- sum(con*coef(mlr3))
mlrs = summary(mlr3)
con <- c(1,log(50000),3,2)
lhat <- sum(con*coef(mlr3))
# Calculate the critical value with degree of freedom of 116
t = qt(0.975,117)
c3 = 1
bm = t*mlrs$sigma*sqrt(con%*%mlrs$cov.unscaled%*%con + c3)
# Prediction interval of new response
c(lhat - bm, lhat + bm)^3
# Alternative method to get prediction interval
con = data.frame(x1 = 50000, x2 = 3, x3 = 60, x4 = 2)
predict(mlr3, con, interval = 'prediction', level = 0.95)^3
predict(mlr3, con, interval = 'confidence', level = 0.95)^3
## First, read in the source file with the functions for the reproducibility code:
source("PaC_Functions_Revised.R")
## Next, read in the two example data sets, to be used in creating the reproducible working example:
z.500 = read.csv("Page_View_Matrix_Example.csv", header = T)
setwd("C:/Users/User/PycharmProjects/CDantzig/walkthrough")
## First, read in the source file with the functions for the reproducibility code:
source("PaC_Functions_Revised.R")
## Next, read in the two example data sets, to be used in creating the reproducible working example:
z.500 = read.csv("Page_View_Matrix_Example.csv", header = T)
info.500 = read.csv("500_Site_Info_Example.csv", header = T)
c.500 = info.500[,3]
tau.500 = info.500[,4]
q.500 = info.500[,5]
z.500[is.na(z.500)] <- 0
# Calculate the gamma values for each site, as detailed in the PaC paper
gamma.500 = 1/(c.500*tau.500)
?ELMSO
??ELMSO
install.packages(c("lars", "quadprog", "limSolve","MASS","MBESS"))
library(lars)
library(quadprog)
library(limSolve)
## Next, read in the two example data sets, to be used in creating the reproducible working example:
z.500 = read.csv("Page_View_Matrix_Example.csv", header = T)
info.500 = read.csv("500_Site_Info_Example.csv", header = T)
c.500 = info.500[,3]
tau.500 = info.500[,4]
q.500 = info.500[,5]
z.500[is.na(z.500)] <- 0
# Calculate the gamma values for each site, as detailed in the PaC paper
gamma.500 = 1/(c.500*tau.500)
trial.ELMSO = ELMSO(z.500[,-1], gamma = gamma.500, step = 0.02, size = 250, C.full = NULL, b = NULL)
trial.ELMSO = ELMSO(z.500[,-1], gamma = gamma.500, step = 0.02, size = 250, b = NULL)
trial.ELMSO
trial.PAC = compare.to.ELMSO(z.500[,-1], gamma = gamma.500, step = 0.02, size = 250)
trial.PAC
### Repeat the function calls above, but for click rate
trial.ELMSO.CTR = ELMSO(z.500[,-1], gamma = gamma.500, step = 0.03, size = 250, C.full = NULL, b = NULL, q = q.500)
### Repeat the function calls above, but for click rate
trial.ELMSO.CTR = ELMSO(z.500[,-1], gamma = gamma.500, step = 0.03, size = 250, b = NULL, q = q.500)
trial.ELMSO.CTR
trial.PAC.CTR = compare.to.ELMSO(z.500[,-1], gamma = gamma.500, step = 0.03, size = 250, C.full = NULL, b = NULL, q = q.500)
trial.PAC.CTR = compare.to.ELMSO(z.500[,-1], gamma = gamma.500, step = 0.03, size = 250, q = q.500)
trial.PAC.CTR
## Extract budget points for each lambda (saved in w.sum) for each of the four models
B.ELMSO = trial.ELMSO$w.sum
B.PAC = trial.PAC$w.sum
B.ELMSO.CTR = trial.ELMSO.CTR$w.sum
B.PAC.CTR = trial.PAC.CTR$w.sum
B.ELMSO
reach.pac = reach.elmso = ctr.pac = ctr.elmso = reach.cost = ctr.cost = reach.naive = ctr.naive = rep(0,250)
reach.pac
for(i in 1:250){
if(trial.PAC$w.sum[i]!=0){reach.pac[i] = reach.calc(trial.PAC$w[,i],z.500[,-1], gamma.500)}
if(trial.PAC$w.sum[i]!=0){reach.naive[i] = reach.calc(rep(trial.PAC$w.sum[i]/500,500), z.500[,-1], gamma.500)}
if(trial.PAC$w.sum[i]!=0){reach.cost[i] = reach.calc(trial.PAC$w.sum[i]*(rev(c.500/sum(c.500))), z.500[,-1], gamma.500)}
if(trial.ELMSO$w.sum[i]!=0){reach.elmso[i] = reach.calc(trial.ELMSO$w[,i], z.500[,-1], gamma.500)}
if(trial.PAC$w.sum[i]!=0){ctr.pac[i] = reach.calc(trial.PAC$w[,i], z.500[,-1], gamma.500, q = q.500)}
if(trial.PAC$w.sum[i]!=0){ctr.naive[i] = reach.calc(rep(trial.PAC$w.sum[i]/500,500), z.500[,-1], gamma.500, q = q.500)}
if(trial.PAC$w.sum[i]!=0){ctr.cost[i] = reach.calc(trial.PAC$w.sum[i]*(rev(c.500/sum(c.500))), z.500[,-1], gamma.500, q = q.500)}
if(trial.ELMSO$w.sum[i]!=0){ctr.elmso[i] = reach.calc(trial.ELMSO$w[,i], z.500[,-1], gamma.500, q = q.500)}
}
par(mfrow = c(1,2), xpd = TRUE)
plot(B.ELMSO[1:250]/1000000, reach.elmso[1:250],type = "l", xlab = "Budget (in millions)", ylab = "Reach", col = "blue")
lines(B.PAC[1:203]/1000000, reach.pac[1:203], col = "black")
lines(B.PAC[1:203]/1000000, reach.cost[1:203], col = "purple")
lines(B.PAC[1:203]/1000000, reach.naive[1:203], col = "green")
plot(B.PAC[1:203]/1000000, ctr.pac[1:203], type = "l", xlab = "Budget (in millions)", ylab = "CTR", col = "black")
lines(B.ELMSO[1:250]/1000000, ctr.elmso[1:250], col = "blue")
lines(B.PAC[1:203]/1000000, ctr.cost[1:203], col = "purple")
lines(B.PAC[1:203]/1000000, ctr.naive[1:203], col = "green")
B.ELMSO
ctr.elmso
par(mfrow = c(1,2), xpd = TRUE)
plot(B.ELMSO[1:250]/1000000, reach.elmso[1:250],type = "l", xlab = "Budget (in millions)", ylab = "Reach", col = "blue")
lines(B.PAC[1:203]/1000000, reach.pac[1:203], col = "black")
lines(B.PAC[1:203]/1000000, reach.cost[1:203], col = "purple")
lines(B.PAC[1:203]/1000000, reach.naive[1:203], col = "green")
plot(B.PAC[1:203]/1000000, ctr.pac[1:203], type = "l", xlab = "Budget (in millions)", ylab = "CTR", col = "black")
lines(B.ELMSO[1:250]/1000000, ctr.elmso[1:250], col = "blue")
lines(B.PAC[1:203]/1000000, ctr.cost[1:203], col = "purple")
lines(B.PAC[1:203]/1000000, ctr.naive[1:203], col = "green")
